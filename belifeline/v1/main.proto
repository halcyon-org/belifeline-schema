syntax = "proto3";

package belifeline.v1;

import "belifeline/v1/api.proto";

option go_package = "github.com/halcyon-org/kizuna/gen/belifeline/v1;mainv1";

/**
 * Health Check Service
 * No authentication is required and public access is always available
 */
service HealthService {
  // Check the health of the service
  rpc Check(CheckRequest) returns (CheckResponse);
  // Watch the health of the service
  rpc Watch(WatchRequest) returns (stream WatchResponse);
}

/**
 * Services related to system administration, such as account creation
 * Administrator (Admin API Key) authentication is required
 */
service AdminService {
  // Create or update a client. The client ID is automatically generated and returned
  rpc ClientSet(ClientSetRequest) returns (ClientSetResponse) {}
  // List all clients
  rpc ClientList(ClientListRequest) returns (ClientListResponse) {}
  // Delete a client
  rpc ClientDelete(ClientDeleteRequest) returns (ClientDeleteResponse) {}
  // Revoke and renew the client's API key. The client's API key is automatically generated and returned
  rpc ClientRevoke(ClientRevokeRequest) returns (ClientRevokeResponse) {}

  // Create or update an external information. The external information provider ID is automatically generated and returned
  rpc ExternalInformationSet(ExternalInformationSetRequest) returns (ExternalInformationSetResponse) {}
  // Delete an external information
  rpc ExternalInformationDelete(ExternalInformationDeleteRequest) returns (ExternalInformationDeleteResponse) {}

  /**
   * Create or update a koyo
   * The koyo ID is automatically generated and returned
   */
  rpc KoyoCreate(KoyoCreateRequest) returns (KoyoCreateResponse) {}
  // Delete a koyo
  rpc KoyoDelete(KoyoDeleteRequest) returns (KoyoDeleteResponse) {}
  // Revoke and renew the koyo's API key. The koyo's API key is automatically generated and returned
  rpc KoyoApiRevoke(KoyoApiRevokeRequest) returns (KoyoApiRevokeResponse) {}
}

/**
 * Service as an information provider provided by belifeline
 * Client (Client Information API Key) authentication is required
 */
service ProviderService {
  // List all external information
  rpc ExternalInformationList(ExternalInformationListRequest) returns (ExternalInformationListResponse) {}
  // List all koyo information
  rpc KoyoList(KoyoListRequest) returns (stream KoyoListResponse) {}
  // Get basic information about External Information
  rpc ExternalInformationGet(ExternalInformationGetRequest) returns (ExternalInformationGetResponse) {}
  // Get koyo data generated by Koyo
  rpc KoyoDataGet(KoyoDataGetRequest) returns (KoyoDataGetResponse) {}
}

/**
 * Service that provides something for updating external information
 * ExternalInformation (External Information API Key) authentication is required.
 */
service ExternalInformationService {
  // rpc to inform kizuna that extinfo (external api and other information) has been updated
  rpc ExternalInformationUpdateNotification(ExternalInformationUpdateNotificationRequest) returns (ExternalInformationUpdateNotificationResponse) {}
}

/**
 * Koyo itself is a service for interacting with Kizuna
 * Koyo (Koyo Information API Key) authentication is required.
 */
service KoyoService {
  // Update koyo information
  rpc KoyoUpdate(KoyoUpdateRequest) returns (KoyoUpdateResponse) {}
  // After koyo processes the data, it calls this rpc to store the generated data (in permanent storage via kizuna)
  rpc KoyoDataAdd(KoyoDataAddRequest) returns (KoyoDataAddResponse) {}
}
