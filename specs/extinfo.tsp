import "@typespec/http";
import "@typespec/rest";
import "@typespec/versioning";

import "./types.tsp";

using TypeSpec.Http;
using TypeSpec.Rest;
using TypeSpec.Versioning;

using BeLifeline.Types;

@versioned(Versions)
namespace BeLifeline.ExtInfo;
enum Versions {
  latest: "lastest",
}

enum ExtInfoId {
  example: "example_id",
}

@summary("External information")
@doc("Basic information about the external information.")
model ExternalInfomation {
  /**
   * This ID can be obtained through admin api.
   * It is a human friendly format like GitHub repository names.
   * Only the pattern `^[a-z_-]{1,64}$` is allowed.
   */
  @visibility("read", "query", "update", "delete")
  @summary("External ID generated by the admin api")
  external_id: ExtInfoId;

  @summary("External infomation name")
  external_name: string;

  @summary("External infomation description")
  external_description: string;

  @summary("External information license")
  license: string;

  @summary("External information license description")
  license_description: string;

  first_entry_at: utcDateTime;
  last_updated_at: utcDateTime;
  updated_history: utcDateTime[];
}

@route("/extinfo")
@tag("External Information")
@useAuth(ApiKeyAuth<ApiKeyLocation.query, "api_key">)
namespace BeLifeline.ExtInfo {
  @summary("Basic infomation about external information")
  interface ExtInfo {
    @get list(@query limit?: int32): ExternalInfomation[];
    @route("/{extinfo_id}")
    @get
    get(@path extinfo_id: ExtInfoId): ExternalInfomation;
  }

  namespace ExampleInfo {
    @summary("Example data")
    model ExampleData {
      area: GeoJSON.MultiPolygon;
      image: bytes;
    }

    @route("/example_id/data")
    interface ExampleInfo {
      @summary("Get example data endpoint")
      @get
      get(@query area?: GeoJSON.MultiPolygon): {
        @header contentType: "image/jpeg";
        @body data: ExampleData;
      }[];

      @summary("Post example data endpoint")
      @post
      post(data: ExampleData[]): void;
    }
  }
}
