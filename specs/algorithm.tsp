import "@typespec/http";
import "@typespec/rest";
import "@typespec/versioning";

import "./extinfo.tsp";
import "./main.tsp";
import "./types.tsp";

using TypeSpec.Http;
using TypeSpec.Rest;
using TypeSpec.Versioning;

using BeLifeline.ExtInfo;
using BeLifeline.Types;

@versioned(Versions)
namespace BeLifeline.Algorithm;
enum Versions {
  latest: "lastest",
}

scalar algorithmId extends Common.uuid;
scalar algorithmDataId extends Common.uuid;
scalar algorithmScale extends float32;
enum DataType {
  image,
  csv,
  json,
}

@summary("Algorithm information")
@doc("Basic information about the algorithm.")
model AlgorithmInfomation {
  @visibility("read", "query", "update", "delete")
  @summary("Algorithm ID generated by the system")
  @doc("This ID can be obtained through admin api.")
  algorithm_id: algorithmId;

  @summary("Algorithm name")
  @maxLength(64)
  @minLength(1)
  algorithm_name: string;

  @summary("Algorithm description")
  @maxLength(2048)
  algorithm_description: string;

  // TODO: docs
  need_external: ExtInfoId[];

  @summary("param name: param default")
  @doc("Algorithm parameters. The key is the parameter name and the value is the default value.")
  algorithm_params: Record<string>;

  @summary("Algorithm scales is resolution (e.g. one data per meter)")
  @doc("Algorithm scales is resolution (e.g. one data per meter). Returns a list of supported scales.")
  // TODO: stepless?
  algorithm_scales: algorithmScale[];

  @summary("Algorithm data IDs")
  // TODO: what is this?
  algorithm_data_ids: algorithmDataId[];

  @summary("Algorithm version")
  version: Common.version;

  @visibility("read", "query")
  first_entry_at: utcDateTime;

  @visibility("read", "query")
  last_entry_at: utcDateTime;

  @visibility("read", "query")
  last_updated_at: utcDateTime;

  @visibility
  @secret
  @summary("API key for this algorithm")
  @doc("The algorithm itself is used to update the data.")
  secret_api_key: Auth.apiKey;
}

@summary("Algorithm data")
@doc("The data is the result of processing by the algorithm.")
model AlgorithmData {
  // TODO: docs
  @visibility("read", "query")
  algorithm_data_id: algorithmDataId;

  @visibility("read", "query", "update", "delete")
  @summary("Algorithm ID")
  @doc("The ID of the algorithm that generated the data.")
  algorithm_id: algorithmId;

  @summary("Algorithm version")
  @doc("The version of the algorithm used to generate the data.")
  version: Common.version;

  @summary("Algorithm scale")
  @doc("The resolution of the data.")
  algorithm_scale: algorithmScale;

  @summary("Data type")
  @doc("The type of data format.(enum: image, csv, json...)")
  content_type: DataType;

  @summary("Data content")
  @doc("The data content itself.")
  content: bytes;

  @visibility("read", "query")
  @summary("Data entry time")
  entry_at: utcDateTime;

  /**
   * The time at which the data is targeted.
   * The time at which data processing began (= the primary data from which the data was processed was updated).
   * In other words, it indicates which time the data is based on.")
   */
  @visibility("read", "query")
  @summary("Data target time")
  target_at: utcDateTime;
}

@route("/algorithm")
@tag("Algorithm")
@doc("Algorithm API")
namespace BeLifeline.Algorithm {
  interface Algorithm {
    @summary("Get a list of algorithms' basic information")
    @get
    list(@query limit?: int32): AlgorithmInfomation[];
  }

  @route("/{algorithm_id}")
  interface EachAlgorithm {
    @summary("Update information on own algorithm")
    @put
    @useAuth(ApiKeyAuth<ApiKeyLocation.query, "api_key">)
    update(
      @path algorithm_id: algorithmId,
      update_algorithm: AlgorithmInfomation,
    ): AlgorithmInfomation;
    @summary("Get algorithms' basic information")
    @get
    get(@path algorithm_id: algorithmId): AlgorithmInfomation;
  }

  @route("/{algorithm_id}/data")
  @useAuth(ApiKeyAuth<ApiKeyLocation.query, "api_key">)
  interface EachAlgorithmData {
    @summary("Put new data of own algorithm")
    @put
    new(
      @path algorithm_id: algorithmId,
      update_data: AlgorithmData,
    ): AlgorithmData;
  }
}
