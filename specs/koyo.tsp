import "@typespec/http";
import "@typespec/rest";
import "@typespec/versioning";

import "./extinfo.tsp";
import "./main.tsp";
import "./types.tsp";

using TypeSpec.Http;
using TypeSpec.Rest;
using TypeSpec.Versioning;

using BeLifeline.ExtInfo;
using BeLifeline.Types;

@versioned(Versions)
namespace BeLifeline.Koyo;
enum Versions {
  latest: "lastest",
}

@pattern("^[a-z_-]{1,64}$")
scalar koyoId extends string;
scalar koyoDataId extends Common.uuid;
scalar koyoScale extends float32;
enum DataType {
  image,
  csv,
  json,
}

@summary("Koyo information")
@doc("Basic information about the koyo.")
model KoyoInfomation {
  /**
   * This ID can be obtained through admin api.
   * It is a human friendly format like GitHub repository names.
   * Only the pattern `^[a-z_-]{1,64}$` is allowed.
   */
  @visibility("read", "query", "update", "delete")
  @summary("Koyo ID generated by the admin api")
  koyo_id: koyoId;

  @summary("Koyo name")
  @maxLength(64)
  @minLength(1)
  koyo_name: string;

  @summary("Koyo description")
  @maxLength(2048)
  koyo_description: string;

  // TODO: docs
  need_external: ExtInfoId[];

  @summary("param name: param default")
  @doc("Koyo parameters. The key is the parameter name and the value is the default value.")
  koyo_params: Record<string>;

  @summary("Koyo scales is resolution (e.g. one data per meter)")
  @doc("Koyo scales is resolution (e.g. one data per meter). Returns a list of supported scales.")
  // TODO: stepless?
  koyo_scales: koyoScale[];

  @summary("Koyo data IDs")
  // TODO: what is this?
  koyo_data_ids: koyoDataId[];

  @summary("Koyo version")
  version: Common.version;

  @summary("Koyo license")
  license: string;

  @summary("Koyo source license for use")
  @doc("Licenses for primary information and other information used by the koyo.")
  ext_licenses: string[];

  @visibility("read", "query")
  first_entry_at: utcDateTime;

  @visibility("read", "query")
  last_entry_at: utcDateTime;

  @visibility("read", "query")
  last_updated_at: utcDateTime;

  @visibility
  @secret
  @summary("API key for this koyo")
  @doc("The koyo itself is used to update the data.")
  secret_api_key: Auth.apiKey;
}

@summary("Koyo data")
@doc("The data is the result of processing by the koyo.")
model KoyoData {
  // TODO: docs
  @visibility("read", "query")
  koyo_data_id: koyoDataId;

  @visibility("read", "query", "update", "delete")
  @summary("Koyo ID")
  @doc("The ID of the koyo that generated the data.")
  koyo_id: koyoId;

  @summary("Koyo version")
  @doc("The version of the koyo used to generate the data.")
  version: Common.version;

  @summary("Koyo scale")
  @doc("The resolution of the data.")
  koyo_scale: koyoScale;

  @summary("Data type")
  @doc("The type of data format.(enum: image, csv, json...)")
  content_type: DataType;

  @summary("Data content")
  @doc("The data content itself.")
  content: bytes;

  @visibility("read", "query")
  @summary("Data entry time")
  entry_at: utcDateTime;

  /**
   * The time at which the data is targeted.
   * The time at which data processing began (= the primary data from which the data was processed was updated).
   * In other words, it indicates which time the data is based on.")
   */
  @visibility("read", "query")
  @summary("Data target time")
  target_at: utcDateTime;
}

@route("/koyo")
@tag("Koyo")
@doc("Koyo API")
namespace BeLifeline.Koyo {
  interface Koyo {
    @summary("Get a list of koyos' basic information")
    @get
    list(@query limit?: int32): KoyoInfomation[];
  }

  @route("/{koyo_id}")
  interface EachKoyo {
    @summary("Update information on own koyo")
    @put
    @useAuth(ApiKeyAuth<ApiKeyLocation.query, "api_key">)
    update(@path koyo_id: koyoId, update_koyo: KoyoInfomation): KoyoInfomation;
    @summary("Get koyos' basic information")
    @get
    get(@path koyo_id: koyoId): KoyoInfomation;
  }

  @route("/{koyo_id}/data")
  @useAuth(ApiKeyAuth<ApiKeyLocation.query, "api_key">)
  interface EachKoyoData {
    @summary("Post new data of own koyo")
    @post
    new(@path koyo_id: koyoId, update_data: KoyoData): KoyoData;
  }
}
